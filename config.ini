# --- Parkway Configuration ---------------------------------------------------

# General options.

number-of-runs = 1
# Vertex to processor allocation.
# Options:
#   0: as read in,
#   1: random,
#   2: as prescribed in partition file.
vertex-to-processor-allocation = 0
# Seed for pseudo-random number generator (if compiled with SPRNG).
sprng-seed = 1
# Display partitioning information (e.g. settings for each component).
display-info = true
# Display partitioning progress (e.g. number of vertices during coarsening).
display-progress = false
# Write info and progress to a file (writes to the terminal if this is false).
output-to-file = false
# If output-to-file is enabled, write the info and/or progress to this file.
output-file arg = parkway_output.log
# Write the computed partitions to file.
write-partitions-to-file = false
# Randomly shuffle vertices between processes before coarsening.
random-vertex-shuffle = false

[coarsening]
# Type of coarsener.
# Options:
#   first-choice,
#   model-2d.
type = first-choice
# Percentile of hyperedge weight l such that the given percent of the total
# percent of the total hyperedge weight in the hypergraph is found in hyperedges
# with length less than or equal to l.
percentile-cutoff = 100
# Increment for the 'percentile-cutoff' option used in subsequent coarsening
# steps assuming the required percentile does not exceed 100.
percentile-increment = 0
# Minimum number of vertices in coarsest hypergraph for the parallel
# coarsening algorithm.
minimum-coarse-vertices = 200
# Reduction ratio during parallel coarsening. Typically between 1.5 and 2.0.
reduction-ratio = 1.75
# Local vertex visit order during parallel coarsening phase.
# Options:
#   random: random order,
#   increasing: increasing order by index,
#   decreasing: decreasing order by index,
#   increasing-weight: increasing order by weight,
#   decreasing-weight: decreasing order by weight.
vertex-visit-order = random
# Connectivity metric.
# Options:
#   0: cluster weight and hyperedge length not taken into account,
#   1: inversely proportional to resulting cluster weight only,
#   2: inversely proportional to lengths of connecting hyperedges only,
#   3: inversely proportional to both resulting cluster weight and connecting
#      hyperedge lenghts.
connectivity-metric = 3
# Process match requests in a random order from other processes.
randomly-process-match-requests = true

[serial-partitioning]
# Number of serial partitioning runs. If hMETIS or PaToH are used, each
# process will compute max(number-of-serial-runs/p, 1) runs where p is the
# number of processes.
number-of-runs = 1
# Fan out during serial coarsening.
util-fan-out = false
# Divide by cluster weight during serial coarsening.
divide-by-cluster-weight = true
# Use hMETIS to perform serial partitioning (if available).
use-hmetis = false
# Use PaToH to perform serial partitioning (if available).
use-patoh = false

# Recursive bisection options (only used if both 'use-hmetis' and 'use-patoh'
# are false).
[recursive-bisection]
# V-cycle setting.
# Options:
#   final-only: only use V-cycle refinement in the final bisection,
#   all: use V-cycle refinement in each recursive bisection,
#   off: don't use V-cycle refinement.
v-cycles = final-only
# Use a metric which is inversely proportional to the resulting cluster weight.
use-weight-metric = false
# Number of bisection runs used on the coarsest hypergraph.
number-of-initial-partitioning-runs = 1

# PaToH (only if compiled with PaToH and use-patoh = true)
[patoh]
# PaToH settings.
# Options:
#   default: use PATOH_SUGPARAM_DEFAULT
#   speed: use PATOH_SUGPARAM_SPEED
#   quality: use PATOH_SUGPARAM_QUALITY
partition-options = default

# hMETIS (only if compiled with hMETIS and use-hmetis = true)
[hmetis]
# Sets the coarsening scheme used by hMETIS.
# Options:
#   first-choice
#   hybrid: hybrid first choice
#   greedy: greedy first choice
#   hyperedge
#   edge
coarsening = first-choice
# Sets the V-cycle refinement scheme used by hMETIS.
# Options:
#   best-intermediate
#   each-intermediate
#   final
#   off
refinement = best-intermediate

[refinement]
# V-cycle setting.
# Options:
#   final-only: only iterate from the final partition,
#   best: only iterate from the best intermediate partition at the end of each
#         intermediate stage,
#   off: don't use V-cycle refinement.
v-cycles = off
# Limit on number of V-cycle iterations (if being used).
v-cycle-iteration-limit = 32767
# Minimum acceptable gain of a parallel V-cycle (if being used) iteration in
# order to perform another V-cycle iteration. The value is as a percentage of
# the cutsize of the partition before the first V-cycle iteration.
acceptable-gain = 0
# Percentage threshold used to determine whether to accept or reject
# partitions during the parallel uncoarsening phase.
acceptance-threshold = 70
# Reduction in 'refinement.acceptance-threshold' appled at each uncoarsening
# step. Percentage threshold for iteration i+1 (t[i+1]) is equal to
# threshold-reduction * t[i]/100.
threshold-reduction = 70
# Enable early exit criterion.
enable-early-exit = false
# Percentage of consecutive local vertices that are visited, all of whose
# moves do not result in positive gain in the objective function. Must be
# between 0 and 100.
early-exit = 100
# Limit the length of hyperedges which may be refined. The length is
# determined by 'coarsening.reduction-ratio'.
limit-by-length = false
